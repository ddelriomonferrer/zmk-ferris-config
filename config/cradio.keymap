// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

#include "zmk-helpers/key-labels/34.h"                                      // Source key-labels.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.

#define CAPW &kp LG(LS(N3)) // Capture whole screen 
#define CPYW &kp LG(LS(LC(N3))) // Copy whole screen 
#define CAPP &kp LG(LS(N4)) // Capture portion of screen   
#define CPYP &kp LG(LS(LC(N4))) // Copy portion of screen

//intellij shortcuts
#define RENAME &kp LS(F6)
#define IMPOR &kp LA(LC(O))
#define GENER &kp LG(N)
#define COMPI &kp LG(F9)
#define SEARCH &kp LS(LG((R)))
#define OPEN &kp LG(O)

#define DEF_L 0
#define LOW_L 1
#define RAI_L 2
#define BLE_L 3
#define ARR_L 4
#define NUM_L 5

/* Left-hand HRMs. */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

/* Right-hand HRMs. */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)
    &lt {
	    tapping-term-ms = <200>;
    };

/ {
	behaviors {
		ht: hold_tap_mods_standard {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <400>;
			quick-tap-ms = <300>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
        
        // hold-tap fast
		htf: hold_tap_mods_fast {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <180>;
			quick-tap-ms = <300>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};

        // hold-tap slow
		hts: hold_tap_mods_slow {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <450>;
			quick-tap-ms = <200>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
	};

    combos {
	compatible = "zmk,combos";
	combo_cntrl_alt_supr {
	    timeout-ms = <50>;
	    key-positions = <5 6 7>;
	    bindings = <&kp LA(LC(DEL))>;
	};
	combo_grave {
	    timeout-ms = <50>;
	    key-positions = <8 9>;
	    bindings = <&kp LBKT>;
	};
	combo_apostrof {
	    timeout-ms = <50>;
	    key-positions = <17 18>;
	    bindings = <&kp MINUS>;
	};
	combo_tab {
	    timeout-ms = <50>;
	    key-positions = <1 2>;
	    bindings = <&kp TAB>;
	};
	combo_esc {
	    timeout-ms = <50>;
	    key-positions = <11 12>;
	    bindings = <&kp ESC>;
	};
	combo_enter {
	    timeout-ms = <50>;
	    key-positions = <16 17>;
	    bindings = <&kp ENTER>;
	};
	combo_supr {
	    timeout-ms = <50>;
	    key-positions = <7 8>;
	    bindings = <&kp BKSP>;
	};
	combo_delete {
	    timeout-ms = <50>;
	    key-positions = <6 7>;
	    bindings = <&kp DEL>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&kp Q			&kp W		 	&kp E		 	&kp R		   	&kp T					&kp Y			&kp U		  	&kp I			&kp O			&kp P
				&hml LGUI A		&hml LALT S	 	&hml LCTRL D 		&hml LSHIFT F  		&kp G					&kp H			&hmr RSHIFT J  		&hmr RCTRL K		&hmr LALT L		&hmr LGUI QUOT
				&kp Z			&kp X		 	&kp C		 	&kp V		   	&kp B					&kp N			&kp M		  	&kp COMMA		&kp DOT			&kp FSLH
													&lt ARR_L ENTER		&lt LOW_L TAB				&lt RAI_L ESC		&kp SPACE
			>;
		};


		lower_layer {
			bindings = <
				&kp LS(N1)		&kp LS(N2)	  	&kp LS(N3)		&kp LS(N4)		&kp LS(N5)	  			&kp LS(N6)		&kp LS(N7)		&kp LS(N8)		&kp LS(N9)		&kp LS(N0)
				&kp RA(N1)		&kp RA(N2)  		&kp RA(N3)		&kp RA(N4)		&kp RA(N5)				&kp RA(N6)		&kp LS(RBKT)		&kp LS(EQUAL)		&kp LS(MINUS) 		&kp EQUAL
				&kp LS(GRAVE)		&kp RA(GRAVE)		&kp NUHS		&trans			&kp LG(LS(S))				&kp SEMI		&trans			&trans			&trans			&kp CAPS
													&kp ENTER		&trans					&mo ARR_L		&mo NUM_L 
			>;
		};

		raise_layer {
			bindings = <
				&kp N1			&kp N2		  	&kp N3			&kp N4			&kp N5		  			&kp N6			&kp N7			&kp N8			&kp N9			&kp N0
				&kp GRAVE		&trans			&trans			&trans			&trans					&trans			&kp RA(APOS)	        &kp RA(NUHS)		&kp RA(LBKT)		&kp RA(RBKT)			
				&kp LSHIFT		&trans			&kp LS(NUHS)	        &trans			&trans					&trans			&kp NUBS		&kp LS(NUBS)		&trans			&trans
													&kp BKSP		&mo NUM_L				&trans			&trans		
			>;
		};

		ble_layer {
			bindings = <
				&bt BT_SEL 0		&bt BT_SEL 1		&bt BT_SEL 2		&bt BT_SEL 3		&bt BT_SEL 4				&trans			&trans			&trans			&trans			&trans
				&trans			&kp N			&trans			&trans			&trans					&sys_reset		&bt BT_CLR		&bt BT_PRV		&bt BT_NXT		&trans
				&trans			&trans			&trans			&trans			&trans					&trans			&trans			&trans			&trans			&trans
													&trans 			&trans					&trans			&trans
			>;
		};

		arrows_layer {
			bindings = <
				&kp TAB			&trans			&trans			&trans			&trans					&kp PAGE_UP		&kp HOME		&kp UP			&kp END			&kp BKSP
				&kp ESC			&ht LALT S	 	&ht LCTRL D 		&ht LSHIFT F  		&trans					&trans			&kp LEFT		&kp DOWN		&kp RIGHT		&kp LBKT
				&kp LC(Z)		&kp LC(X)		&kp LC(C)		&kp LC(V)		&trans					&kp PAGE_DOWN		&trans			&trans			&trans			&kp ENTER
													&kp BKSP  		&trans 					&mkp LCLK		&mkp RCLK
			>;
		};

		num_layer {
			bindings = <
				&kp F1	  		&kp F2			&kp F3			&kp F4			&trans					&trans			&kp N7			&kp N8			&kp N9			&kp LS(RBKT)
				&kp F5			&kp F6			&kp F7			&kp F8			&trans					&trans			&kp N4			&kp N5			&kp N6			&kp RBKT
				&kp F9			&kp F10			&kp F11			&kp F12			&trans					&trans			&kp N1			&kp N2			&kp N3			&kp FSLH
													&trans 			&mo BLE_L					&kp COMMA		&kp DOT
			>;
		};

    };
};
